#!/bin/sh

set -e

case "$1" in
  "--help"|"-h"|"")
    echo "Usage: $0 [options] [--name container-name] image-name" >&2
    exit 1
    ;;
esac

volumes=""
container_name=""

while [ -n "$1" ]; do
  case "$1" in
    "--volume"|"-v")
      volumes="$(echo "$volumes"; echo "$2")"
      shift 2
      ;;
    "--name")
      container_name="$2"
      named=1
      shift 2
      ;;
    "--rm")
      shift # ignore; used by cc-run or cc-boot.
      ;;
    "-"*)
      echo "Unknown flag: $1" >&2
      exit 1
      ;;
    *)
      break; # end of option args
      ;;
  esac
done

image_name="$1"
shift 1
image="/var/cookie-cutter/images/$image_name"
my_dir="`dirname $0`"

if ! [ -d "$image" ]; then
  echo "Image not found: $image_name" >&2
  return 1
fi

if [ -d "$image/versions" ]; then
  # New images designate one current version among multiple immutable versions.
  versioned_image_name="$image_name/$(readlink "$image/current")"
else
  # Old images have only the "$image" dir as a current version.
  versioned_image_name="$image_name"
fi
versioned_image="/var/cookie-cutter/images/$versioned_image_name"

if [ "x$container_name" = "x" ]; then
  container_name="$image_name.$$"
fi
container="/var/cookie-cutter/containers/$container_name"

needs_to_be_reclaimed () {
    [ "$named" != "" ] &&
    [ -f "$container/pid" ] && ! kill -0 "$(cat "$container/pid")" 2>/dev/null
}

if [ -d "$container" ]; then
  # Reclaim a left-over container if named and not running.  This is
  # needed if the system is hard-rebooted so that named containers can
  # start.
  if needs_to_be_reclaimed; then
    #echo "$0: reclaiming '$container_name'" >&2
    "$my_dir"/cc-stop "$container_name" >&2
    "$my_dir"/cc-remove "$container_name" >&2
  else
    echo "Cannot create container '$container_name': already exists" >&2
    exit 1
  fi
fi

my_dir="`dirname $0`"
cleanup="
  #echo $0: Cleaning up... >&2
  '$my_dir'/cc-umount '$container_name'
  '$my_dir'/cc-remove '$container_name'
"
trap "$cleanup" INT TERM HUP EXIT

mkdir "$container" "$container/diff" "$container/filesystem" "$container/work"
echo "$versioned_image_name" > "$container/from"
echo "$volumes" > "$container/volumes"

# Record that we are using an image, so that the image can efficiently detect
# when all references are removed (as shown by the file link count decreasing
# from 2 to 1).
echo "$container" > "$container/self"
for dir in references references/containers; do
  if ! [ -d "$versioned_image/$dir" ]; then
    mkdir "$versioned_image/$dir"
  fi
done
rm -f "$versioned_image/references/containers/$container_name"
ln "$container/self" "$versioned_image/references/containers/$container_name"

"$my_dir"/cc-mount "$container_name" &&
  "$my_dir"/cc-each-volume "$container_name" '
    if [ -d "$host_path" ]; then
      [ -d "$host_container_path" ] || mkdir "$host_container_path"
    elif [ -f "$host_path" ]; then
      [ -f "$host_container_path" ] || touch "$host_container_path"
    else
      echo "No such volume to mount: '$host_path'" >&2
      exit 1
    fi
    mount --bind "$host_path" "$host_container_path"
  ' &&
  trap - INT TERM HUP EXIT &&
  echo "$container_name"
