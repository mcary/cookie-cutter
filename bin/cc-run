#!/bin/sh

set -e

case "$1" in
  "--help"|"-h"|"")
    echo "Usage: $0 [options] image-name cmd..." >&2
    echo "" >&2
    echo "  --name container_name" >&2
    echo "      Give the container a name to refer to with cc-exec" >&2
    echo "      or to ensure only one such container on the system." >&2
    echo "" >&2
    echo "  --rm" >&2
    echo "      Automatically remove the container on exit." >&2
    echo "      Implied when no '--name' option is given." >&2
    echo "" >&2
    echo "  -v|--volume host-path:container-path" >&2
    echo "      Bind-mount host-path on the host VM as container-path" >&2
    echo "      within the guest container." >&2
    exit 1
    ;;
esac

my_dir="`dirname $0`"
container_name="$("$my_dir"/cc-create "$@")"

while [ -n "$1" ]; do
  case "$1" in
    "--volume"|"-v")
      shift 2
      ;;
    "--name")
      named=1
      shift 2
      ;;
    "--rm")
      remove=1
      shift
      ;;
    "-"*)
      # Ignore options (such as --name, used by cc-create).
      shift
      ;;
    *)
      break; # end of option args
      ;;
  esac
done

if [ "$named" = "" ]; then
  remove=1
fi

image_name="$1"
shift 1
image="/var/cookie-cutter/images/$image_name"

container="/var/cookie-cutter/containers/$container_name"
echo "$container_name" > "$container"/filesystem/etc/debian_chroot

cleanup="
  #echo Cleaning up... >&2
  mntuser () { fuser --ismountpoint --mount \"\$@\" '$container/filesystem'; }
  if ! mntuser --silent 2>&1 | grep -q 'is not a mountpoint' &&
     mntuser --silent --kill -TERM; then
    echo -n 'Sent SIGTERM.  Waiting for processes to stop '
    for i in \`seq 1 100\`; do
      echo -n .
      mntuser --silent || { echo; break; }
      sleep 0.1
      if [ \$i = 100 ]; then
        echo
        mntuser --verbose
        echo Sending SIGKILL.
        mntuser --silent --kill -KILL
      fi
    done
  fi
  '$my_dir'/cc-umount '$container_name'
"
if [ "$remove" = "1" ]; then
  cleanup="
    $cleanup
    rm -rf --one-file-system '$container'
  "
fi
trap "$cleanup" INT TERM HUP EXIT

ns="$container/namespaces"
mkdir "$ns"
touch "$ns/pid" "$ns/mount" "$ns/user" "$ns/uts" "$ns/ipc"

# The mount persistent namespace ("$ns/mount") must be mounted on
# a mount with private substree propagation.
# https://github.com/util-linux/util-linux/issues/289
mount --bind "$ns" "$ns"
mount --make-private "$ns"

default_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

(
  # We need to exec so that we can know the pid of "unshare" and record
  # it before it starts.  We need the subshell -- using parens -- so that
  # the outer shell can still clean up when the container exits.
  # Since $$ expands to the outer shell's pid, we need to be more clever to
  # get the subshell's pid.
  read pid _rest < /proc/self/stat
  echo $pid > "$container/pid"

  # Reasoning behind "unshare" options:
  # --pid: create a pid namespace to hide external processes in top/ps
  # --fork: causes the child process to be visible in the new pid namespace
  # --mount-proc: doesn't work; seems to mount at /proc _before_ chroot
  # --user: create a user namespace
  # --map-root-user: may want to change this for security later, but this is
  #     close to what we accomplish with the old chroot-only approach
  # --uts: for more isolation
  # --ipc: for more isolation
  # --net: someday
  exec unshare \
    --pid="$ns/pid" --fork \
    --mount="$ns/mount" \
    --user="$ns/user" --map-root-user \
    --uts="$ns/uts" --ipc="$ns/ipc" \
    chroot "$container/filesystem" \
    env -i PATH="$default_path" TERM="$TERM" \
    sh -c 'mount -t proc proc /proc && exec "$@"' -- \
    "$@"
)
